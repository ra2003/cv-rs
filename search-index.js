var searchIndex = JSON.parse('{\
"cv":{"doc":"This library primarily provides a binding and API for…","i":[[0,"core","cv","Core data structures in OpenCV",null,null],[3,"KeyPoint","cv::core","Data structure for salient point detectors",null,null],[12,"point","","Coordinates of the keypoint",0,null],[12,"size","","Diameter of the meaningful keypoint neighborhood",0,null],[12,"angle","","Computed orientation of the keypoint (-1 if not…",0,null],[12,"response","","The response by which the most strong keypoints have been…",0,null],[12,"octave","","Octave (pyramid layer) from which the keypoint has been…",0,null],[12,"class_id","","Object class (if the keypoints need to be clustered by an…",0,null],[3,"Scalar","","A 4-element struct that is widely used to pass pixel values.",null,null],[3,"Point2i","","2D integer points specified by its coordinates `x` and `y`.",null,null],[12,"x","","x coordinate",1,null],[12,"y","","y coordinate",1,null],[3,"Point2f","","2D floating points specified by its coordinates `x` and `y`.",null,null],[12,"x","","x coordinate",2,null],[12,"y","","y coordinate",2,null],[3,"Size2i","","`Size2i` struct is used for specifying the size of an…",null,null],[12,"width","","width",3,null],[12,"height","","height",3,null],[3,"Size2f","","`Size2f` struct is used for specifying the size of an…",null,null],[12,"width","","width",4,null],[12,"height","","height",4,null],[3,"Rect","","The `Rect` defines a rectangle in integer.",null,null],[12,"x","","x coordinate of the left-top corner",5,null],[12,"y","","y coordinate of the left-top corner",5,null],[12,"width","","width of this rectangle",5,null],[12,"height","","height of this rectangle",5,null],[3,"Rect2f","","The `Rect2f` are rectangles in float.",null,null],[12,"x","","x coordinate of the left-top corner",6,null],[12,"y","","y coordinate of the left-top corner",6,null],[12,"width","","width of this rectangle",6,null],[12,"height","","height of this rectangle",6,null],[3,"RotatedRect","","This struct represents a rotated (i.e. not up-right)…",null,null],[3,"TermCriteria","","Termination criteria for iterative algorithms.",null,null],[4,"LineType","","Line type",null,null],[13,"Filled","","Default type",7,null],[13,"Line4","","4-connected line",7,null],[13,"Line8","","8-connected line",7,null],[13,"LineAA","","antialiased line",7,null],[4,"FlipCode","","A flag to specify how to flip the image. see Mat::flip",null,null],[13,"XAxis","","Along x-axis: dst[i, j] = src[src.rows - i - 1, j]",8,null],[13,"YAxis","","Along y-axis: dst[i, j] = src[i, src.cols - j - 1]",8,null],[13,"XYAxis","","Along both axis: dst[i, j] = src[src.rows - i - 1,…",8,null],[4,"CvType","","Here is the `CvType` in an easy-to-read table.",null,null],[13,"Cv8UC1","","8 bit unsigned, single channel (grey image)",9,null],[13,"Cv8SC1","","8 bit signed, single channel (grey image)",9,null],[13,"Cv16UC1","","16 bit unsigned, single channel (grey image)",9,null],[13,"Cv16SC1","","16 bit signed, single channel (grey image)",9,null],[13,"Cv32SC1","","32 bit signed, single channel (grey image)",9,null],[13,"Cv32FC1","","32 bit float, single channel (grey image)",9,null],[13,"Cv64FC1","","32 bit float, single channel (grey image)",9,null],[13,"Cv8UC2","","8 bit, two channel (rarelly seen)",9,null],[13,"Cv8UC3","","8 bit unsigned, three channels (RGB image)",9,null],[13,"Cv8SC3","","8 bit signed, three channels (RGB image)",9,null],[13,"Cv16UC3","","16 bit unsigned, three channels (RGB image)",9,null],[13,"Cv16SC3","","16 bit signed, three channels (RGB image)",9,null],[13,"Cv32SC3","","32 bit signed, three channels (RGB image)",9,null],[13,"Cv32FC3","","32 bit float, three channels (RGB image)",9,null],[13,"Cv64FC3","","32 bit float, three channels (RGB image)",9,null],[4,"NormType","","Normalization type. Please refer to OpenCV\'s documentation.",null,null],[13,"Inf","","Normalized using `max`",10,null],[13,"L1","","Normalized using L1 distance",10,null],[13,"L2","","Normalized using L2 distance",10,null],[13,"L2Sqr","","Normalized using L2 sqr distance",10,null],[13,"Hamming","","Normalized using hamming distance",10,null],[13,"Hamming2","","Normalized using hamming2 distance",10,null],[13,"Relative","","Normalized using relative distance",10,null],[13,"MinMax","","Normalized using minmax distance",10,null],[4,"TermType","","Term criteria type, can be one of: Count, Eps or Count + Eps",null,null],[13,"Count","","The maximum number of iterations or elements to compute",11,null],[13,"EPS","","the desired accuracy or change in parameters at which the…",11,null],[8,"FromBytes","","Allow self deserialization from byte slice",null,null],[10,"from_bytes","","Deserializes self from byte slice",12,[[]]],[11,"new","","Creates a new scalar object.",13,[[["c_int",6]]]],[11,"all","","Creates a new scalar object with all value being the same.",13,[[["c_int",6]]]],[11,"new","","Creats a new `Point2i`.",1,[[["c_int",6]]]],[11,"new","","Creats a new `Point2f`.",2,[[]]],[11,"new","","Creates a new `Size2i` object with `width` and `height`",3,[[["c_int",6]]]],[11,"new","","Creates a new `Rect` with (x, y, width, height) parameters.",5,[[["c_int",6]]]],[11,"scale","","Scales the rectangle by the specified ratio.",5,[[],["rect",3]]],[11,"normalize_to_mat","","Normalize the rectangle according to the image (if the…",5,[[["mat",3]],["rect2f",3]]],[11,"normalize_to_mat","","Normalize the rectangle according to the image. This will…",6,[[["mat",3]],["rect",3]]],[11,"points","","Return 4 vertices of the rectangle.",14,[[]]],[11,"bounding_rect","","Return the minimal up-right rectangle containing the…",14,[[],["rect",3]]],[11,"new","","Creates a new termination criteria.",15,[[["c_int",6],["termtype",4]]]],[0,"cuda","cv","Bindings to OpenCV\'s classes and functions that exploits…",null,null],[3,"GpuMat","cv::cuda","`GpuMat` data structure in rust, bound to an opaque type…",null,null],[12,"cols","","Number of columns",16,null],[12,"rows","","Number of rows",16,null],[12,"depth","","Depth of this mat",16,null],[3,"GpuHog","","Data structure that performs Histogram of Gradient (HOG).",null,null],[12,"params","","Hog parameters.",17,null],[12,"return_score","","Should return detection scores",17,null],[3,"GpuCascade","","Data structure that performs object detection with a…",null,null],[4,"CGpuMat","","Opaque data struct for C/C++ cv::cuda::GpuMat bindings",null,null],[4,"CGpuHog","","Opaque data struct for C bindings",null,null],[4,"CGpuCascade","","Opaque data struct for C bindings",null,null],[11,"default","","Creates a default `GpuMat`.",16,[[],["gpumat",3]]],[11,"upload","","Uploads a normal `Mat`",16,[[["mat",3]]]],[11,"new","","Creates a new GpuHog detector.",17,[[["size2i",3],["c_int",6]],["gpuhog",3]]],[11,"return_score","","Should or not return the detection score",17,[[]]],[11,"with_params","","Creates a new GpuHog detector with parameters specified…",17,[[["hogparams",3]],["gpuhog",3]]],[11,"set_svm_detector","","Sets the SVM detector.",17,[[["svmdetector",3]]]],[11,"from_path","","Loads the classifier from a file.",18,[[["asref",8],["path",3]],[["error",3],["result",4]]]],[11,"detect_multiscale","","Detects objects of different sizes in the input image.",18,[[["gpumat",3]],[["vec",3],["rect",3]]]],[11,"set_find_largest_object","","Sets whether or not to find the only largest object.",18,[[]]],[11,"set_max_num_objects","","Sets the maximum number of objects.",18,[[["c_int",6]]]],[11,"set_min_neighbors","","Sets minimal neighbors required for a detection to be valid.",18,[[["c_int",6]]]],[11,"set_max_object_size","","Sets the maximun object size.",18,[[["size2i",3]]]],[11,"set_min_object_size","","Sets the minimal object size.",18,[[["size2i",3]]]],[11,"set_scale_factor","","Sets the scale factor used in multiscale detection.",18,[[]]],[11,"get_classifier_size","","Returns the classifier size.",18,[[],["size2i",3]]],[11,"get_find_largest_object_flag","","Returns if the CascadeClassifier will only return the…",18,[[]]],[11,"get_max_num_objects","","Returns the allowed maximal number of detected objects.",18,[[],["c_int",6]]],[11,"get_min_neighbors","","Returns the number of minimal neighbors required for a…",18,[[],["c_int",6]]],[11,"get_max_object_size","","Returns the maximum object size.",18,[[],["size2i",3]]],[11,"get_min_object_size","","Returns the minimal object size.",18,[[],["size2i",3]]],[11,"get_scale_factor","","Returns the scale factor.",18,[[]]],[0,"errors","cv","Errors for OpenCV bindings",null,null],[4,"CvError","cv::errors","Custom errors that may happen during calls",null,null],[13,"InvalidPath","","Indicates that path was invalid",19,null],[13,"EntryNotFound","","Indicates that there is no entry on specified path",19,null],[13,"UnknownError","","Indicates that error occurred in C++ code",19,null],[13,"UnicodeChars","","Indicates that string contains non ascii characters",19,null],[0,"features2d","cv","Provide 2D image feature detectors and descriptor extractors",null,null],[3,"BOWKMeansTrainer","cv::features2d","K-means - based class to train visual vocabulary using the…",null,null],[3,"DMatch","","Type for matching keypoint descriptors",null,null],[3,"DescriptorMatcher","","Type for matching keypoint descriptors",null,null],[3,"MSER","","Maximally stable extremal region extractor.",null,null],[3,"MSERBuilder","","Builder that provides defaults for MSER",null,null],[3,"SIFT","","Speeded up robust features extractor.",null,null],[3,"SIFTBuilder","","Builder that provides defaults for MSER",null,null],[3,"SURF","","Speeded up robust features extractor.",null,null],[3,"SURFBuilder","","Builder that provides defaults for MSER",null,null],[4,"KMeansCenters","","k-Means centers",null,null],[13,"Random","","Select random initial centers in each attempt.",20,null],[13,"Pp","","Use kmeans++ center initialization by Arthur and…",20,null],[4,"DescriptorMatcherType","","Descriptor matcher type",null,null],[13,"BruteForce","","",21,null],[13,"BruteForceL1","","",21,null],[13,"BruteForceHamming","","",21,null],[13,"BruteForceHamming2","","",21,null],[13,"FlannBased","","",21,null],[11,"new","","Creates a new maximally stable extremal region extractor…",22,[[["termcriteria",3],["kmeanscenters",4]]]],[11,"add","","Adds descriptors to a training set",22,[[["mat",3]]]],[11,"cluster","","Clusters train descriptors",22,[[],["mat",3]]],[11,"new","","Creates a descriptor matcher of a given type with the…",23,[[["descriptormatchertype",4]],["descriptormatcher",3]]],[11,"add","","Adds descriptors to train a CPU or GPU descriptor collection",23,[[["vec",3]]]],[11,"train","","Trains a descriptor matcher",23,[[]]],[11,"is_empty","","Returns true if there are no train descriptors",23,[[]]],[11,"match_","","Finds the best match for each descriptor from a query set",23,[[["mat",3]],[["vec",3],["dmatch",3]]]],[11,"match_two","","Finds the best match for each descriptor from a query set.…",23,[[["mat",3]],[["vec",3],["dmatch",3]]]],[11,"knn_match","","Finds the k best matches for each descriptor from a query…",23,[[["mat",3]],[["vec",3],["vec",3]]]],[11,"new","","Creates a new maximally stable extremal region extractor…",24,[[["c_int",6]]]],[11,"detect_regions","","Detect MSER regions.",24,[[["mat",3]]]],[11,"delta","","Replace current delta with specified value",25,[[["c_int",6]]]],[11,"min_area","","Replace current min_area with specified value",25,[[["c_int",6]]]],[11,"max_area","","Replace current max_area with specified value",25,[[["c_int",6]]]],[11,"max_variation","","Replace current max_variation with specified value",25,[[]]],[11,"min_diversity","","Replace current min_diversity with specified value",25,[[]]],[11,"max_evolution","","Replace current max_evolution with specified value",25,[[["c_int",6]]]],[11,"area_threshold","","Replace current area_threshold with specified value",25,[[]]],[11,"min_margin","","Replace current min_margin with specified value",25,[[]]],[11,"edge_blur_size","","Replace current edge_blur_size with specified value",25,[[["c_int",6]]]],[11,"new","","Creates a new maximally stable extremal region extractor…",26,[[["c_int",6]]]],[11,"features","","Replace current features with specified value",27,[[["c_int",6]]]],[11,"octave_layers","","Replace current octave_layers with specified value",27,[[["c_int",6]]]],[11,"contrast_threshold","","Replace current contrast_threshold with specified value",27,[[]]],[11,"edge_threshold","","Replace current edge_threshold with specified value",27,[[]]],[11,"sigma","","Replace current sigma with specified value",27,[[]]],[11,"new","","Creates a new maximally stable extremal region extractor…",28,[[["c_int",6]]]],[11,"hessian_threshold","","Replace current octave_layers with specified value",29,[[]]],[11,"octaves","","Replace current octave_layers with specified value",29,[[["c_int",6]]]],[11,"octave_layers","","Replace current octave_layers with specified value",29,[[["c_int",6]]]],[11,"extended","","Replace current extended with specified value",29,[[]]],[11,"upright","","Replace current delta with specified value",29,[[]]],[8,"Feature2D","","Basic trait for 2D image feature detectors and descriptor…",null,null],[10,"detect_and_compute","","Detects keypoints and computes the descriptors",30,[[["mat",3]]]],[0,"hash","cv","The module brings implementations of different image…",null,null],[3,"AverageHash","cv::hash","Computes average hash value of the input image",null,null],[3,"BlockMeanHash","","Image hash based on block mean",null,null],[3,"ColorMomentHash","","Image hash based on color moments",null,null],[3,"MarrHildrethHash","","Marr-Hildreth Operator Based Hash, slowest but more…",null,null],[3,"PHash","","Slower than AverageHash, but tolerant of minor modifications",null,null],[3,"RadialVarianceHash","","Image hash based on Radon transform",null,null],[8,"HashImplInterface","","",null,null],[8,"Hash","","Basic trait for all hash types",null,null],[10,"compute","","Computes image hash",31,[[["mat",3]],["mat",3]]],[10,"compare","","Compares two image hashes",31,[[["mat",3]]]],[11,"new","","Creates new instance",32,[[]]],[11,"new","","Creates new instance",33,[[]]],[11,"new","","Creates new instance",34,[[]]],[11,"new","","Creates new instance",35,[[]]],[11,"new","","Creates new instance",36,[[]]],[11,"new","","Creates new instance",37,[[]]],[0,"highgui","cv","highgui: high-level GUI",null,null],[4,"WindowFlag","cv::highgui","Flags for highgui_named_window. This only supports a…",null,null],[13,"Normal","","the window can be resized (no constraint) or switched to…",38,null],[13,"Autosize","","the window is constrained by the image displayed.",38,null],[13,"Opengl","","the window is with opengl support.",38,null],[13,"FreeRatio","","the window can be resized arbitrarily (no ratio constraint).",38,null],[4,"MouseEventType","","Mouse Events",null,null],[13,"MouseMove","","Indicates that the mouse has moved over the window.",39,null],[13,"LButtonDown","","Indicates that the left mouse button is pressed.",39,null],[13,"RButtonDown","","Indicates that the right mouse button is pressed.",39,null],[13,"MButtonDown","","Indicates that the middle mouse button is pressed.",39,null],[13,"LButtonUp","","Indicates that left mouse button is released.",39,null],[13,"RButtonUp","","Indicates that right mouse button is released.",39,null],[13,"MButtonUp","","Indicates that middle mouse button is released.",39,null],[13,"LButtonClick","","Indicates that left mouse button is double clicked.",39,null],[13,"RButtonClick","","Indicates that right mouse button is double clicked.",39,null],[13,"MButtonClick","","Indicates that middle mouse button is double clicked.",39,null],[13,"MouseWheel","","Positive/negative means forward/backward scrolling.",39,null],[13,"MouseHWheel","","Positive/negative means right and left scrolling.",39,null],[5,"highgui_named_window","","Create a window that can be used as a placeholder for…",null,[[["windowflag",4]],[["result",4],["error",3]]]],[5,"highgui_destroy_window","","Destroy the specified window with the given name.",null,[[]]],[5,"highgui_set_mouse_callback","","Set mouse handler for the specified window (identified by…",null,[[["mousecallback",6]],[["result",4],["error",3]]]],[6,"MouseCallbackData","","Pointer referring to the data used in MouseCallback",null,null],[6,"MouseCallback","","Callback function for mouse events, primarily used in…",null,null],[8,"Show","","Provides some highgui functionallity",null,null],[10,"show","","Calls out to highgui to show the image, the duration is…",40,[[["c_int",6]],[["result",4],["error",3]]]],[0,"imgcodecs","cv","Image file reading and writing, see OpenCV imgcodecs.",null,null],[4,"ImageReadMode","cv::imgcodecs","ImreadModes. See documentation for detauls",null,null],[13,"Unchanged","","If set, return the loaded image as is (with alpha channel,…",41,null],[13,"Grayscale","","If set, always convert image to the single channel…",41,null],[13,"Color","","If set, always convert image to the 3 channel BGR color…",41,null],[13,"AnyDepth","","If set, return 16-bit/32-bit image when the input has the…",41,null],[13,"AnyColor","","If set, the image is read in any possible color format.",41,null],[13,"LoadGdal","","If set, use the gdal driver for loading the image.",41,null],[13,"ReducedGrayscale2","","If set, always convert image to the single channel…",41,null],[13,"ReducedColor2","","If set, always convert image to the 3 channel BGR color…",41,null],[13,"ReducedGrayscale4","","If set, always convert image to the single channel…",41,null],[13,"ReducedColor4","","If set, always convert image to the 3 channel BGR color…",41,null],[13,"ReducedGrayscale8","","If set, always convert image to the single channel…",41,null],[13,"ReducedColor8","","If set, always convert image to the 3 channel BGR color…",41,null],[4,"ImageWriteMode","","Imwrite flags. See documentation for detauls",null,null],[13,"JpegQuality","","For JPEG, it can be a quality from 0 to 100 (the higher is…",42,null],[13,"JpegProgressive","","Enable JPEG features, 0 or 1, default is False.",42,null],[13,"JpegOptimize","","Enable JPEG features, 0 or 1, default is False.",42,null],[13,"JpegRstInterval","","JPEG restart interval, 0 - 65535, default is 0 - no restart.",42,null],[13,"JpegLumaQuality","","Separate luma quality level, 0 - 100, default is 0 - don\'t…",42,null],[13,"JpegChromaQuality","","Separate chroma quality level, 0 - 100, default is 0 -…",42,null],[13,"PngCompression","","For PNG, it can be the compression level from 0 to 9. A…",42,null],[13,"PngStrategy","","One of cv::ImwritePNGFlags, default is…",42,null],[13,"PngBilevel","","Binary level PNG, 0 or 1, default is 0.",42,null],[13,"PxmBinary","","For PPM, PGM, or PBM, it can be a binary format flag, 0 or…",42,null],[13,"WebpQuality","","For WEBP, it can be a quality from 1 to 100 (the higher is…",42,null],[13,"PamTupletype","","For PAM, sets the TUPLETYPE field to the corresponding…",42,null],[4,"ImageWritePngStrategy","","Imwrite PNG flag. See documentation for detauls",null,null],[13,"Default","","Use this value for normal data.",43,null],[13,"Filtered","","Use this value for data produced by a filter (or…",43,null],[13,"HuffmanOnly","","Use this value to force Huffman encoding only (no string…",43,null],[13,"RLE","","Use this value to limit match distances to one (run-length…",43,null],[13,"Fixed","","Using this value prevents the use of dynamic Huffman…",43,null],[0,"imgproc","cv","Image processing, see OpenCV imgproc.",null,null],[4,"HistogramComparisionMethod","cv::imgproc","Possible methods for histogram comparision method",null,null],[13,"Correlation","","HISTCMP_CORREL",44,null],[13,"ChiSquare","","HISTCMP_CHISQR",44,null],[13,"Intersection","","HISTCMP_INTERSECT",44,null],[13,"Bhattacharyya","","HISTCMP_BHATTACHARYYA and HISTCMP_HELLINGER",44,null],[13,"ChiSquareAlternative","","HISTCMP_CHISQR_ALT",44,null],[13,"KullbackLeiblerDivergence","","HISTCMP_KL_DIV",44,null],[4,"ThresholdType","","ThresholdTypes used in threshold.",null,null],[13,"Binary","","",45,null],[13,"BinaryInv","","",45,null],[13,"Trunc","","",45,null],[13,"ToZero","","",45,null],[13,"ToZeroInv","","",45,null],[13,"Mask","","",45,null],[13,"Otsu","","",45,null],[13,"Triangle","","",45,null],[4,"ColorConversion","","Color conversion code used in cvt_color.",null,null],[13,"BGR2BGRA","","",46,null],[13,"BGRA2BGR","","",46,null],[13,"BGR2RGBA","","",46,null],[13,"RGBA2BGR","","",46,null],[13,"BGR2RGB","","",46,null],[13,"BGRA2RGBA","","",46,null],[13,"BGR2GRAY","","",46,null],[13,"RGB2GRAY","","",46,null],[13,"GRAY2BGR","","",46,null],[13,"GRAY2BGRA","","",46,null],[13,"BGRA2GRAY","","",46,null],[13,"RGBA2GRAY","","",46,null],[13,"BGR2BGR565","","",46,null],[13,"RGB2BGR565","","",46,null],[13,"BGR5652BGR","","",46,null],[13,"BGR5652RGB","","",46,null],[13,"BGRA2BGR565","","",46,null],[13,"RGBA2BGR565","","",46,null],[13,"BGR5652BGRA","","",46,null],[13,"BGR5652RGBA","","",46,null],[13,"GRAY2BGR565","","",46,null],[13,"BGR5652GRAY","","",46,null],[13,"BGR2BGR555","","",46,null],[13,"RGB2BGR555","","",46,null],[13,"BGR5552BGR","","",46,null],[13,"BGR5552RGB","","",46,null],[13,"BGRA2BGR555","","",46,null],[13,"RGBA2BGR555","","",46,null],[13,"BGR5552BGRA","","",46,null],[13,"BGR5552RGBA","","",46,null],[13,"GRAY2BGR555","","",46,null],[13,"BGR5552GRAY","","",46,null],[13,"BGR2XYZ","","",46,null],[13,"RGB2XYZ","","",46,null],[13,"XYZ2BGR","","",46,null],[13,"XYZ2RGB","","",46,null],[13,"BGR2YCrCb","","",46,null],[13,"RGB2YCrCb","","",46,null],[13,"YCrCb2BGR","","",46,null],[13,"YCrCb2RGB","","",46,null],[13,"BGR2HSV","","",46,null],[13,"RGB2HSV","","",46,null],[13,"BGR2Lab","","",46,null],[13,"RGB2Lab","","",46,null],[13,"BGR2Luv","","",46,null],[13,"RGB2Luv","","",46,null],[13,"BGR2HLS","","",46,null],[13,"RGB2HLS","","",46,null],[13,"HSV2BGR","","",46,null],[13,"HSV2RGB","","",46,null],[13,"Lab2BGR","","",46,null],[13,"Lab2RGB","","",46,null],[13,"Luv2BGR","","",46,null],[13,"Luv2RGB","","",46,null],[13,"HLS2BGR","","",46,null],[13,"HLS2RGB","","",46,null],[13,"BGR2HSV_FULL","","",46,null],[13,"RGB2HSV_FULL","","",46,null],[13,"BGR2HLS_FULL","","",46,null],[13,"RGB2HLS_FULL","","",46,null],[13,"HSV2BGR_FULL","","",46,null],[13,"HSV2RGB_FULL","","",46,null],[13,"HLS2BGR_FULL","","",46,null],[13,"HLS2RGB_FULL","","",46,null],[13,"LBGR2Lab","","",46,null],[13,"LRGB2Lab","","",46,null],[13,"LBGR2Luv","","",46,null],[13,"LRGB2Luv","","",46,null],[13,"Lab2LBGR","","",46,null],[13,"Lab2LRGB","","",46,null],[13,"Luv2LBGR","","",46,null],[13,"Luv2LRGB","","",46,null],[13,"BGR2YUV","","",46,null],[13,"RGB2YUV","","",46,null],[13,"YUV2BGR","","",46,null],[13,"YUV2RGB","","",46,null],[13,"YUV2RGB_NV12","","",46,null],[13,"YUV2BGR_NV12","","",46,null],[13,"YUV2RGB_NV21","","",46,null],[13,"YUV2BGR_NV21","","",46,null],[13,"YUV2RGBA_NV12","","",46,null],[13,"YUV2BGRA_NV12","","",46,null],[13,"YUV2RGBA_NV21","","",46,null],[13,"YUV2BGRA_NV21","","",46,null],[13,"YUV2RGB_YV12","","",46,null],[13,"YUV2BGR_YV12","","",46,null],[13,"YUV2RGB_IYUV","","",46,null],[13,"YUV2BGR_IYUV","","",46,null],[13,"YUV2RGBA_YV12","","",46,null],[13,"YUV2BGRA_YV12","","",46,null],[13,"YUV2RGBA_IYUV","","",46,null],[13,"YUV2BGRA_IYUV","","",46,null],[13,"YUV2GRAY_420","","",46,null],[13,"YUV2RGB_UYVY","","",46,null],[13,"YUV2BGR_UYVY","","",46,null],[13,"YUV2RGBA_UYVY","","",46,null],[13,"YUV2BGRA_UYVY","","",46,null],[13,"YUV2RGB_YUY2","","",46,null],[13,"YUV2BGR_YUY2","","",46,null],[13,"YUV2RGB_YVYU","","",46,null],[13,"YUV2BGR_YVYU","","",46,null],[13,"YUV2RGBA_YUY2","","",46,null],[13,"YUV2BGRA_YUY2","","",46,null],[13,"YUV2RGBA_YVYU","","",46,null],[13,"YUV2BGRA_YVYU","","",46,null],[13,"YUV2GRAY_UYVY","","",46,null],[13,"YUV2GRAY_YUY2","","",46,null],[13,"RGBA2mRGBA","","",46,null],[13,"mRGBA2RGBA","","",46,null],[13,"RGB2YUV_I420","","",46,null],[13,"BGR2YUV_I420","","",46,null],[13,"RGBA2YUV_I420","","",46,null],[13,"BGRA2YUV_I420","","",46,null],[13,"RGB2YUV_YV12","","",46,null],[13,"BGR2YUV_YV12","","",46,null],[13,"RGBA2YUV_YV12","","",46,null],[13,"BGRA2YUV_YV12","","",46,null],[13,"BayerBG2BGR","","",46,null],[13,"BayerGB2BGR","","",46,null],[13,"BayerRG2BGR","","",46,null],[13,"BayerGR2BGR","","",46,null],[13,"BayerBG2GRAY","","",46,null],[13,"BayerGB2GRAY","","",46,null],[13,"BayerRG2GRAY","","",46,null],[13,"BayerGR2GRAY","","",46,null],[13,"BayerBG2BGR_VNG","","",46,null],[13,"BayerGB2BGR_VNG","","",46,null],[13,"BayerRG2BGR_VNG","","",46,null],[13,"BayerGR2BGR_VNG","","",46,null],[13,"BayerBG2BGR_EA","","",46,null],[13,"BayerGB2BGR_EA","","",46,null],[13,"BayerRG2BGR_EA","","",46,null],[13,"BayerGR2BGR_EA","","",46,null],[13,"COLORCVT_MAX","","",46,null],[4,"InterpolationFlag","","Interpolation algorithm",null,null],[13,"InterNearst","","nearest neighbor interpolation",47,null],[13,"InterLinear","","bilinear interpolation",47,null],[13,"InterCubic","","bicubic interpolation",47,null],[13,"InterArea","","resampling using pixel area relation. It may be a…",47,null],[13,"InterLanczos4","","Lanczos interpolation over 8x8 neighborhood",47,null],[13,"InterLinearExact","","Bit exact bilinear interpolation",47,null],[13,"InterMax","","mask for interpolation codes",47,null],[13,"WarpFillOutliers","","flag, fills all of the destination image pixels. If some…",47,null],[13,"WarpInverseMap","","flag, inverse transformation",47,null],[0,"mat","cv","Mat",null,null],[3,"Mat","cv::mat","The class `Mat` represents an n-dimensional dense…",null,null],[12,"cols","","Number of columns",48,null],[12,"rows","","Number of rows",48,null],[12,"depth","","Depth of this mat (it should be the type).",48,null],[12,"channels","","Channels of this mat",48,null],[4,"CMat","","The class `CMat` is used as a pointer to represent the Mat…",null,null],[4,"BorderType","","Various border types, image boundaries are denoted with `|`.",null,null],[13,"Constant","","`iiiiii|abcdefgh|iiiiiii`  with some specified `i`",49,null],[13,"Replicate","","`aaaaaa|abcdefgh|hhhhhhh`",49,null],[13,"Reflect","","`fedcba|abcdefgh|hgfedcb`",49,null],[13,"Wrap","","`cdefgh|abcdefgh|abcdefg`",49,null],[13,"Reflect101","","`gfedcb|abcdefgh|gfedcba`",49,null],[13,"Transparent","","`uvwxyz|abcdefgh|ijklmno`",49,null],[13,"Isolated","","Do not look outside of ROI.",49,null],[11,"from_file_storage","","Loads `Mat` from file storage",48,[[["asref",8],["path",3]],[["error",3],["mat",3],["result",4]]]],[11,"new","","Creates an empty `Mat` struct.",48,[[],["mat",3]]],[11,"from_buffer","","Creates a new `Mat` from buffer. Note that internally…",48,[[["c_int",6],["cvtype",4]],["mat",3]]],[11,"with_size","","Create an empty `Mat` with specific size (rows, cols and…",48,[[["c_int",6]]]],[11,"zeros","","Create an empty `Mat` with specific size (rows, cols and…",48,[[["c_int",6]]]],[11,"data","","Returns the raw data (as a `u8` pointer)",48,[[]]],[11,"total","","Returns the total number of array elements. The method…",48,[[]]],[11,"elem_size","","Returns the matrix element size in bytes.",48,[[]]],[11,"elem_size1","","Returns the size of each matrix element channel in bytes.",48,[[]]],[11,"step1","","Returns a normalized step.",48,[[["c_int",6]]]],[11,"size","","Returns the size of this matrix.",48,[[],["size2i",3]]],[11,"is_valid","","Check if the `Mat` is valid or not.",48,[[]]],[11,"roi","","Return a region of interest from a `Mat` specfied by a…",48,[[["rect",3]],["mat",3]]],[11,"flip","","Flips an image around vertical, horizontal, or both axes.",48,[[["flipcode",4]]]],[11,"cv_type","","Returns the images type. For supported types, please see…",48,[[],["cvtype",4]]],[11,"eye","","Returns an identity matrix of the specified size and type.",48,[[["cvtype",4]],["mat",3]]],[11,"at","","Returns individual pixel (element) information within the…",48,[[],["frombytes",8]]],[11,"at2","","Returns individual pixel (element) information within the…",48,[[],["frombytes",8]]],[11,"at3","","Returns individual pixel (element) information within the…",48,[[],["frombytes",8]]],[11,"in_range","","Checks if Mat elements lie between the elements of two…",48,[[["scalar",3]],["mat",3]]],[11,"min_max_loc","","Finds the global minimum and maximum in an array.",48,[[["mat",3]]]],[11,"mix_channels","","Copy specified channels from `self` to the specified…",48,[[["asref",8]],["mat",3]]],[11,"normalize","","Normalize the Mat according to the normalization type.",48,[[["normtype",4]],["mat",3]]],[11,"count_non_zero","","Counts non-zero array elements.",48,[[],["c_int",6]]],[11,"copy_make_border","","Forms a border around an image.",48,[[["bordertype",4],["scalar",3]],["mat",3]]],[18,"Default","","same as Reflect101",49,null],[0,"objdetect","cv","Various object detection algorithms, such as Haar…",null,null],[3,"CascadeClassifier","cv::objdetect","Cascade classifier class for object detection.",null,null],[3,"SvmDetector","","SvmDetector",null,null],[3,"HogParams","","Parameters that controls the behavior of HOG.",null,null],[12,"win_size","","Detection window size. Align to block size and block…",50,null],[12,"block_size","","Block size in pixels. Align to cell size. Only (16,16) is…",50,null],[12,"block_stride","","Block stride. It must be a multiple of cell size.",50,null],[12,"cell_size","","Cell size. Only (8, 8) is supported for now.",50,null],[12,"nbins","","Number of bins. Only 9 bins per cell are supported for now.",50,null],[12,"win_sigma","","Gaussian smoothing window parameter. Default -1 for CPU…",50,null],[12,"l2hys_threshold","","L2-Hys normalization method shrinkage. Default 0.2.",50,null],[12,"gamma_correction","","Flag to specify whether the gamma correction preprocessing…",50,null],[12,"nlevels","","Maximum number of detection window increases (HOG scales).…",50,null],[12,"hit_threshold","","Threshold for the distance between features and SVM…",50,null],[12,"win_stride","","Window stride. It must be a multiple of block stride.",50,null],[12,"padding","","Padding",50,null],[12,"scale","","Coefficient of the detection window increase.",50,null],[12,"group_threshold","","Coefficient to regulate the similarity threshold. When…",50,null],[12,"use_meanshift_grouping","","The useMeanShiftGrouping parameter is a boolean indicating…",50,null],[12,"final_threshold","","The `finalThreshold` parameter is mainly used to select…",50,null],[3,"HogDescriptor","","`HogDescriptor` implements Histogram of Oriented Gradients.",null,null],[12,"params","","Hog parameters.",51,null],[4,"CSvmDetector","","Opaque type for C/C++ SvmDetector object",null,null],[8,"ObjectDetect","","An object detect trait.",null,null],[10,"detect","","Detects the object inside this image and returns a list of…",52,[[["mat",3]],["vec",3]]],[11,"new","","Creates a cascade classifier, uninitialized. Before use,…",53,[[],["cascadeclassifier",3]]],[11,"from_path","","Creates a cascade classifier using the model specified.",53,[[["asref",8],["path",3]],[["error",3],["result",4]]]],[11,"load","","Loads the classifier model from a path.",53,[[["asref",8],["path",3]],[["result",4],["error",3]]]],[11,"detect_multiscale","","The default detection uses scale factor 1.1, minNeighbors…",53,[[["mat",3]],[["vec",3],["rect",3]]]],[11,"detect_with_params","","Detects the object using parameters specified.",53,[[["size2i",3],["c_int",6],["mat",3]],[["vec",3],["rect",3]]]],[11,"default_people_detector","","The built-in people detector.",54,[[],["svmdetector",3]]],[11,"daimler_people_detector","","Returns the Daimler people detector.",54,[[],["svmdetector",3]]],[11,"with_params","","Creates a HogDescriptor with provided parameters.",51,[[["hogparams",3]],["hogdescriptor",3]]],[11,"set_svm_detector","","Sets the SVM detector.",51,[[["svmdetector",3]]]],[0,"video","cv","Video Analysis, see OpenCV video",null,null],[0,"tracking","cv::video","Object Tracking, see OpenCV video track",null,null],[11,"camshift","cv::mat","Finds an object center, size, and orientation; returns as…",48,[[["termcriteria",3],["rect",3]],["rotatedrect",3]]],[0,"analysis","cv::video","Motion Analysis, see OpenCV video motion",null,null],[0,"videoio","cv","Media I/O, see OpenCV videoio",null,null],[3,"VideoCapture","cv::videoio","Video capturing from video files, image sequences or…",null,null],[3,"VideoWriter","","`VideoWriter` provides easy access to write videos to…",null,null],[4,"CapProp","","Video capture\'s property identifier.",null,null],[13,"PosMsec","","Current position of the video file in milliseconds or…",55,null],[13,"PosFrames","","0-based index of the frame to be decoded/captured next.",55,null],[13,"PosAviRatio","","Relative position of the video file: 0 - start of the…",55,null],[13,"FrameWidth","","Width of the frames in the video stream.",55,null],[13,"FrameHeight","","Height of the frames in the video stream.",55,null],[13,"Fps","","Frame rate.",55,null],[13,"Fourcc","","4-character code of codec.",55,null],[13,"FrameCount","","Number of frames in the video file.",55,null],[13,"Format","","Format of the Mat objects returned by retrieve() .",55,null],[13,"Mode","","Backend-specific value indicating the current capture mode.",55,null],[13,"Brightness","","Brightness of the image (only for cameras).",55,null],[13,"Contrast","","Contrast of the image (only for cameras).",55,null],[13,"Saturation","","Saturation of the image (only for cameras).",55,null],[13,"Hue","","Hue of the image (only for cameras).",55,null],[13,"Gain","","Gain of the image (only for cameras).",55,null],[13,"Exposure","","Exposure (only for cameras).",55,null],[13,"ConvertRgb","","Boolean flags indicating whether images should be…",55,null],[13,"WhiteBalanceBlueU","","Currently not supported",55,null],[13,"Rectification","","Rectification flag for stereo cameras (note: only…",55,null],[13,"Monochrome","","",55,null],[13,"Sharpness","","",55,null],[13,"AutoExposure","","",55,null],[13,"Gamma","","",55,null],[13,"Temperature","","",55,null],[13,"Trigger","","",55,null],[13,"TriggerDelay","","",55,null],[13,"WhiteBalanceRedV","","",55,null],[13,"Zoom","","",55,null],[13,"Focus","","",55,null],[13,"Guid","","",55,null],[13,"IsoSpeed","","",55,null],[13,"Backlight","","",55,null],[13,"Pan","","",55,null],[13,"Tilt","","",55,null],[13,"Roll","","",55,null],[13,"Iris","","",55,null],[13,"Settings","","",55,null],[13,"Buffersize","","",55,null],[13,"Autofocus","","",55,null],[4,"VideoWriterProperty","","`VideoWriter`\'s property identifier.",null,null],[13,"Quality","","Current quality of the encoded videostream.",56,null],[13,"FrameBytes","","(Read-only) Size of just encoded video frame; note that…",56,null],[13,"NStripes","","Number of stripes for parallel encoding",56,null],[5,"codec_name_from_4cc","","Converts from four character code to `u32`",null,[[],[["error",3],["result",4]]]],[5,"codec_name_to_4cc","","Converts to four character code from `u32`.",null,[[],["string",3]]],[11,"new","","Creates a capture device with specified camera id. If…",57,[[["c_int",6]]]],[11,"from_path","","Creates a capture device with the path of a video file…",57,[[]]],[11,"from_pipeline","","Create a capture device from a gstreamer pipeline (eg.…",57,[[]]],[11,"is_open","","Returns true if video capturing has been initialized…",57,[[]]],[11,"read","","Grabs, decodes and returns the next video frame. `read`…",57,[[],[["mat",3],["option",4]]]],[11,"set","","Sets a property in the `VideoCapture`.",57,[[["capprop",4]]]],[11,"get","","Gets a property in the `VideoCapture`.",57,[[["capprop",4]],["option",4]]],[11,"new","","`VideoWriter` constructor. -path – Name of the output…",58,[[["c_int",6],["size2i",3]],["videowriter",3]]],[11,"open","","`VideoWriter` constructor. -path – Name of the output…",58,[[["c_int",6],["size2i",3]]]],[11,"write","","Writes the specified image to video file. It must have the…",58,[[["mat",3]]]],[11,"is_open","","Returns true if video writer has been initialized already.",58,[[]]],[11,"set","","Sets a property in the `VideoWriter`. Note:…",58,[[["videowriterproperty",4]]]],[11,"get","","Gets a property in the `VideoWriter`.",58,[[["videowriterproperty",4]],["option",4]]],[11,"from","cv::core","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","cv::cuda","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","cv::errors","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"as_fail","","",19,[[],["fail",8]]],[11,"from","cv::features2d","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"compute","cv::hash","Computes image hash",32,[[["mat",3]],["mat",3]]],[11,"compare","","Compares two image hashes",32,[[["mat",3]]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"compute","","Computes image hash",33,[[["mat",3]],["mat",3]]],[11,"compare","","Compares two image hashes",33,[[["mat",3]]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"compute","","Computes image hash",34,[[["mat",3]],["mat",3]]],[11,"compare","","Compares two image hashes",34,[[["mat",3]]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"compute","","Computes image hash",35,[[["mat",3]],["mat",3]]],[11,"compare","","Compares two image hashes",35,[[["mat",3]]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"compute","","Computes image hash",36,[[["mat",3]],["mat",3]]],[11,"compare","","Compares two image hashes",36,[[["mat",3]]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"compute","","Computes image hash",37,[[["mat",3]],["mat",3]]],[11,"compare","","Compares two image hashes",37,[[["mat",3]]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","cv::highgui","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","cv::imgcodecs","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","cv::imgproc","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","cv::mat","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","cv::objdetect","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","cv::videoio","",57,[[]]],[11,"into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"detect_and_compute","cv::features2d","",26,[[["mat",3]]]],[11,"detect_and_compute","","",28,[[["mat",3]]]],[11,"show","cv::mat","",48,[[["c_int",6]],[["result",4],["error",3]]]],[11,"detect","cv::cuda","",17,[[["mat",3]],["vec",3]]],[11,"detect","","",18,[[["mat",3]],["vec",3]]],[11,"detect","cv::objdetect","",53,[[["mat",3]],["vec",3]]],[11,"detect","","",51,[[["mat",3]],["vec",3]]],[11,"drop","cv::core","",15,[[]]],[11,"drop","cv::cuda","",16,[[]]],[11,"drop","","",17,[[]]],[11,"drop","","",18,[[]]],[11,"drop","cv::features2d","",22,[[]]],[11,"drop","","",23,[[]]],[11,"drop","","",24,[[]]],[11,"drop","","",26,[[]]],[11,"drop","","",28,[[]]],[11,"drop","cv::hash","",32,[[]]],[11,"drop","","",33,[[]]],[11,"drop","","",34,[[]]],[11,"drop","","",35,[[]]],[11,"drop","","",36,[[]]],[11,"drop","","",37,[[]]],[11,"drop","cv::mat","",48,[[]]],[11,"drop","cv::objdetect","",53,[[]]],[11,"drop","","",54,[[]]],[11,"drop","","",51,[[]]],[11,"drop","cv::videoio","",57,[[]]],[11,"drop","","",58,[[]]],[11,"from","cv::mat","",48,[[["gpumat",3]],["mat",3]]],[11,"from","cv::cuda","",16,[[["mat",3]],["gpumat",3]]],[11,"into","cv::features2d","",25,[[],["mser",3]]],[11,"into","","",27,[[],["sift",3]]],[11,"into","","",29,[[],["surf",3]]],[11,"into","cv::mat","",48,[[],["cmat",4]]],[11,"clone","cv::core","",0,[[],["keypoint",3]]],[11,"clone","","",13,[[],["scalar",3]]],[11,"clone","","",1,[[],["point2i",3]]],[11,"clone","","",2,[[],["point2f",3]]],[11,"clone","","",3,[[],["size2i",3]]],[11,"clone","","",4,[[],["size2f",3]]],[11,"clone","","",5,[[],["rect",3]]],[11,"clone","","",6,[[],["rect2f",3]]],[11,"clone","","",7,[[],["linetype",4]]],[11,"clone","","",8,[[],["flipcode",4]]],[11,"clone","","",9,[[],["cvtype",4]]],[11,"clone","","",14,[[],["rotatedrect",3]]],[11,"clone","","",10,[[],["normtype",4]]],[11,"clone","","",11,[[],["termtype",4]]],[11,"clone","cv::cuda","",59,[[],["cgpumat",4]]],[11,"clone","","",60,[[],["cgpuhog",4]]],[11,"clone","","",61,[[],["cgpucascade",4]]],[11,"clone","cv::features2d","",20,[[],["kmeanscenters",4]]],[11,"clone","","",62,[[],["dmatch",3]]],[11,"clone","","",21,[[],["descriptormatchertype",4]]],[11,"clone","","",25,[[],["mserbuilder",3]]],[11,"clone","","",27,[[],["siftbuilder",3]]],[11,"clone","","",29,[[],["surfbuilder",3]]],[11,"clone","cv::highgui","",38,[[],["windowflag",4]]],[11,"clone","","",39,[[],["mouseeventtype",4]]],[11,"clone","cv::imgcodecs","",41,[[],["imagereadmode",4]]],[11,"clone","","",42,[[],["imagewritemode",4]]],[11,"clone","","",43,[[],["imagewritepngstrategy",4]]],[11,"clone","cv::imgproc","",44,[[],["histogramcomparisionmethod",4]]],[11,"clone","","",45,[[],["thresholdtype",4]]],[11,"clone","","",46,[[],["colorconversion",4]]],[11,"clone","","",47,[[],["interpolationflag",4]]],[11,"clone","cv::mat","",63,[[],["cmat",4]]],[11,"clone","","",49,[[],["bordertype",4]]],[11,"clone","","",48,[[]]],[11,"clone","cv::objdetect","",64,[[],["csvmdetector",4]]],[11,"clone","","",50,[[],["hogparams",3]]],[11,"clone","cv::videoio","",55,[[],["capprop",4]]],[11,"clone","","",56,[[],["videowriterproperty",4]]],[11,"default","cv::core","",0,[[],["keypoint",3]]],[11,"default","","",13,[[],["scalar",3]]],[11,"default","","",1,[[],["point2i",3]]],[11,"default","","",2,[[],["point2f",3]]],[11,"default","","",3,[[],["size2i",3]]],[11,"default","","",4,[[],["size2f",3]]],[11,"default","","",5,[[],["rect",3]]],[11,"default","","",6,[[],["rect2f",3]]],[11,"default","","",14,[[],["rotatedrect",3]]],[11,"default","cv::cuda","",17,[[],["gpuhog",3]]],[11,"default","cv::features2d","",62,[[],["dmatch",3]]],[11,"default","","",25,[[],["mserbuilder",3]]],[11,"default","","",27,[[],["siftbuilder",3]]],[11,"default","","",29,[[],["surfbuilder",3]]],[11,"default","cv::objdetect","",50,[[],["hogparams",3]]],[11,"default","","",51,[[],["hogdescriptor",3]]],[11,"default","cv::videoio","",58,[[],["videowriter",3]]],[11,"eq","cv::core","",5,[[["rect",3]]]],[11,"ne","","",5,[[["rect",3]]]],[11,"eq","","",7,[[["linetype",4]]]],[11,"eq","","",8,[[["flipcode",4]]]],[11,"eq","","",9,[[["cvtype",4]]]],[11,"eq","","",10,[[["normtype",4]]]],[11,"eq","","",11,[[["termtype",4]]]],[11,"eq","cv::highgui","",38,[[["windowflag",4]]]],[11,"eq","","",39,[[["mouseeventtype",4]]]],[11,"eq","cv::imgcodecs","",41,[[["imagereadmode",4]]]],[11,"eq","","",42,[[["imagewritemode",4]]]],[11,"eq","","",43,[[["imagewritepngstrategy",4]]]],[11,"eq","cv::imgproc","",44,[[["histogramcomparisionmethod",4]]]],[11,"eq","","",45,[[["thresholdtype",4]]]],[11,"eq","","",46,[[["colorconversion",4]]]],[11,"eq","","",47,[[["interpolationflag",4]]]],[11,"eq","cv::videoio","",55,[[["capprop",4]]]],[11,"eq","","",56,[[["videowriterproperty",4]]]],[11,"fmt","cv::core","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","cv::cuda","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","cv::errors","",19,[[["formatter",3]],["result",6]]],[11,"fmt","cv::features2d","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","cv::hash","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","cv::highgui","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","cv::imgcodecs","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","cv::imgproc","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","cv::mat","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","cv::objdetect","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","cv::videoio","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","cv::errors","",19,[[["formatter",3]],["result",6]]],[11,"not","cv::mat","",48,[[]]],[11,"bitand","","",48,[[]]],[11,"bitor","","",48,[[]]],[11,"bitxor","","",48,[[]]],[11,"hash","cv::core","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","cv::highgui","",38,[[]]],[11,"hash","","",39,[[]]],[11,"hash","cv::imgcodecs","",41,[[]]],[11,"hash","","",42,[[]]],[11,"hash","","",43,[[]]],[11,"hash","cv::imgproc","",44,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",46,[[]]],[11,"hash","","",47,[[]]],[11,"hash","cv::videoio","",55,[[]]],[11,"hash","","",56,[[]]],[11,"name","cv::errors","",19,[[],["option",4]]],[11,"cause","","",19,[[],[["fail",8],["option",4]]]],[11,"backtrace","","",19,[[],[["option",4],["backtrace",3]]]],[11,"image_decode","cv::mat","Decodes an image from `buf` according to the specified mode.",48,[[["imagereadmode",4]],["mat",3]]],[11,"image_encode","","Encodes an image; the encoding scheme depends on the…",48,[[["imagewritemode",4],["vec",3]],[["vec",3],["result",4],["error",3]]]],[11,"from_path","","Creates a `Mat` from reading the image specified by the…",48,[[["asref",8],["imagereadmode",4],["path",3]],[["error",3],["mat",3],["result",4]]]],[11,"line","","Draws a simple line.",48,[[["point2i",3]]]],[11,"line_custom","","Draws a line with custom color, thickness and linetype.",48,[[["point2i",3],["scalar",3],["c_int",6],["linetype",4]]]],[11,"rectangle","","Draws a simple, thick, or filled up-right rectangle.",48,[[["rect",3]]]],[11,"rectangle_custom","","Draws a rectangle with custom color, thickness and linetype.",48,[[["scalar",3],["c_int",6],["linetype",4],["rect",3]]]],[11,"rectangle2f","","Draw a simple, thick, or filled up-right rectangle.",48,[[["rect2f",3]]]],[11,"ellipse","","Draws a simple, thick ellipse",48,[[["point2i",3],["size2i",3]]]],[11,"ellipse_custom","","Draws a custom ellipse",48,[[["point2i",3],["size2i",3],["scalar",3],["c_int",6],["linetype",4]]]],[11,"cvt_color","","Convert an image from one color space to another.",48,[[["colorconversion",4]],["mat",3]]],[11,"pyr_down","","Blurs an image and downsamples it. This function performs…",48,[[],["mat",3]]],[11,"threshold","","Threshold",48,[[["thresholdtype",4]],["mat",3]]],[11,"erode","","Erode",48,[[["point2i",3],["scalar",3],["bordertype",4],["mat",3]],["mat",3]]],[11,"dilate","","Dilate",48,[[["point2i",3],["scalar",3],["bordertype",4],["mat",3]],["mat",3]]],[11,"gaussian_blur","","Gaussian Blur",48,[[["size2i",3],["bordertype",4]],["mat",3]]],[11,"resize_to","","Resizes an image.",48,[[["size2i",3],["interpolationflag",4]],["mat",3]]],[11,"resize_by","","Resizes an image.",48,[[["interpolationflag",4]],["mat",3]]],[11,"calc_hist","","Calculate a histogram of an image.",48,[[["asref",8],["asref",8],["mat",3]],["mat",3]]],[11,"calc_back_project","","Calculate the back projection of a histogram. The function…",48,[[["asref",8],["asref",8],["mat",3]],["mat",3]]],[11,"compare_hist","","Compares two histograms. The function compare two…",48,[[["histogramcomparisionmethod",4],["mat",3]],[["string",3],["result",4]]]],[11,"sobel","","Calculates the first x- or y- image derivative using Sobel…",48,[[["bordertype",4]],["mat",3]]],[11,"scharr","","Calculates the first x- or y- image derivative using…",48,[[["bordertype",4]],["mat",3]]],[11,"canny","","Performs canny edge detection",48,[[],[["string",3],["mat",3],["result",4]]]]],"p":[[3,"KeyPoint"],[3,"Point2i"],[3,"Point2f"],[3,"Size2i"],[3,"Size2f"],[3,"Rect"],[3,"Rect2f"],[4,"LineType"],[4,"FlipCode"],[4,"CvType"],[4,"NormType"],[4,"TermType"],[8,"FromBytes"],[3,"Scalar"],[3,"RotatedRect"],[3,"TermCriteria"],[3,"GpuMat"],[3,"GpuHog"],[3,"GpuCascade"],[4,"CvError"],[4,"KMeansCenters"],[4,"DescriptorMatcherType"],[3,"BOWKMeansTrainer"],[3,"DescriptorMatcher"],[3,"MSER"],[3,"MSERBuilder"],[3,"SIFT"],[3,"SIFTBuilder"],[3,"SURF"],[3,"SURFBuilder"],[8,"Feature2D"],[8,"Hash"],[3,"AverageHash"],[3,"BlockMeanHash"],[3,"ColorMomentHash"],[3,"MarrHildrethHash"],[3,"PHash"],[3,"RadialVarianceHash"],[4,"WindowFlag"],[4,"MouseEventType"],[8,"Show"],[4,"ImageReadMode"],[4,"ImageWriteMode"],[4,"ImageWritePngStrategy"],[4,"HistogramComparisionMethod"],[4,"ThresholdType"],[4,"ColorConversion"],[4,"InterpolationFlag"],[3,"Mat"],[4,"BorderType"],[3,"HogParams"],[3,"HogDescriptor"],[8,"ObjectDetect"],[3,"CascadeClassifier"],[3,"SvmDetector"],[4,"CapProp"],[4,"VideoWriterProperty"],[3,"VideoCapture"],[3,"VideoWriter"],[4,"CGpuMat"],[4,"CGpuHog"],[4,"CGpuCascade"],[3,"DMatch"],[4,"CMat"],[4,"CSvmDetector"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);